<?php

/**
 * Implements the tripal_analysis_blast_form for importing of blast results.
 */
function tripal_analysis_blast_form($form, &$form_state) {

  // Default values can come in the following ways:
  $blast = NULL;
  $blastdb = '';
  $blastfile = '';
  $blastfile_ext = '';
  $query_re = '';
  $query_type = '';
  $query_uniquename = '';
  $is_concat = '';
  $search_keywords = '';
  $blastjob = FALSE;

  // if we are re constructing the form from a failed validation or ajax callback
  // then use the $form_state['values'] values
  if (array_key_exists('values', $form_state)) {
    $blastdb          = $form_state['values']['blastdb'];
    $blastfile        = $form_state['values']['blastfile'];
    $blastfile_ext    = $form_state['values']['blastfile_ext'];
    $query_re         = $form_state['values']['query_re'];
    $query_type       = $form_state['values']['query_type'];
    $query_uniquename = $form_state['values']['query_uniquename'];
    $is_concat        = $form_state['values']['is_concat'];
  }
  // if we are re building the form from after submission (from ajax call) then
  // the values are in the $form_state['input'] array
  if (array_key_exists('input', $form_state) and !empty($form_state['input'])) {
    $blastdb          = $form_state['input']['blastdb'];
    $blastfile        = $form_state['input']['blastfile'];
    $blastfile_ext    = $form_state['input']['blastfile_ext'];
    $query_re         = $form_state['input']['query_re'];
    $query_type       = $form_state['input']['query_type'];
    $query_uniquename = isset($form_state['input']['query_uniquename']) ? $form_state['input']['query_uniquename'] : 0;
    $is_concat        = isset($form_state['input']['is_concat']) ? $form_state['input']['is_concat'] : 0;
  }

  // Get the bundle for an analysis
  $analysis_term = tripal_load_term_entity(array('vocabulary' => 'local', 'accession' => 'analysis'));
  $analysis_bundle = tripal_load_bundle_entity(array('term_id' => $analysis_term->id));

  // get the list of analyses
  $sql = "SELECT * FROM {analysis} ORDER BY name";
  $org_rset = chado_query($sql);
  $analyses = array();
  $analyses[''] = '';
  while ($analysis = $org_rset->fetchObject()) {
    $analyses[$analysis->analysis_id] = "$analysis->name ($analysis->program $analysis->programversion, $analysis->sourcename)";
  }
  $form['analysis_id'] = array(
    '#title'       => t('Analysis'),
    '#type'        => t('select'),
    '#description' => t("Choose the record that describes the BLAST analysis that was performed.
       If a BLAST analysis record does not yet exist, !create_analysis. Why specify an analysis for a data load?  All data comes
       from some place, even if downloaded from Genbank. By specifying
       analysis details for all data imports it allows an end user to reproduce the
       data set, but at least indicates the source of the data.", array(
         '!create_analysis' => l('please create one', 'bio_data/add/' . $analysis_bundle->id)
       )),
    '#required'    => TRUE,
    '#options'     => $analyses,
  );

  // get a list of db from chado for user to choose
  $sql = 'SELECT db_id,  name FROM {db} ORDER BY lower(name)';
  $results = chado_query($sql);

  $blastdbs = array();
  while ($db = $results->fetchObject()) {
    $blastdbs[$db->db_id] = $db->name;
  }
  $form['db_options'] = array(
    '#type' => 'value',
    '#value' => $blastdbs
  );
  $form['blastdb'] = array(
    '#title' => t('Database'),
    '#type' => 'select',
    '#description' => t('The database used for the blast analysis. If the database does not appear in this list, please !add_database.
       Each database may have a different format for each match. This blast module will attempt to extract the match name,
       match accession, and organism from each match.  To ensure the parser is able to properly extract
       this information. Please set the proper regular expression values on the !settings_page
       Databases from NCBI have a built-in parser. On the Blast Settings page, simply click the box "Use Genebank style parser"',
         array(
           '!add_database' => l('add a new database', 'admin/tripal/storage/chado/db/add', array('attributes' => array('target' => '_blank'))),
           '!settings_page' => l('Blast Settings page.', 'admin/tripal/extension/tripal_blast_analysis', array('attributes' => array('target' => '_blank')))
         )),
    '#options' => $form['db_options']['#value'],
    '#default_value' => $blastdb,
  );

  $form['blastfile'] = array(
    '#title' => t('Blast XML File/Directory: (if you input a directory without the tailing slash,  all xml files in the directory will be loaded)'),
    '#type' => 'textfield',
    '#description' => t('The xml output file generated by blast in full path.'),
    '#default_value' => $blastfile,
  );
  $form['blastfile_ext'] = array(
    '#title' => t('Blast XML file extension'),
    '#type' => 'textfield',
    '#description' => t('If a directory is provide for the blast file setting above,  then a file extension can be provided here. Files with this extension in the directory will be parsed.  If no extension is provided then files with a .xml extension will be parsed within the directory. Please provide the extension without the preceeding period (e.g. "out" rather than ".out"'),
    '#default_value' => $blastfile_ext,
  );
  $form['is_concat'] = array(
    '#title' => t('Is the XML file concatenated?'),
    '#type' => 'checkbox',
    '#description' => t('Is the XML file a set of concatenated XML results?  Such is the case,  for instance, if <a href="http://www.blast2go.org/">Blast2GO</a> was used to generate the blast results. If
      NCBI BLAST was used with output in XML then this options should not be checked.'),
    '#default_value' => $is_concat,
  );
  $form['no_parsed'] = array(
    '#title' => t('Number of hits to be parsed'),
    '#type' => 'textfield',
    '#description' => t("The number of hits to be parsed. Tripal will parse only top 10 hits if you input '10'' in this field. Enter the text 'all' to parse all hits. Default is to parse only the top 25 hits per match."),
    '#default_value' => '25',
  );

  $form['query_re'] = array(
    '#title' => t('Query Name RE'),
    '#type' => 'textfield',
    '#description' => t('Enter the regular expression that will extract the '.
        'feature name from the query line in the blast results. This should be '.
        'the same as the definition line in the query FASTA file.  This option is '.
        'is only required when the query does not identically match a feature '.
        'in the database.'),
    '#default_value' => $query_re,
  );

  $cv = tripal_get_cv(array('name' => 'sequence'));
  $cv_id = $cv->cv_id;
  $form['query_type'] = array(
    '#title' => t('Query Type'),
    '#type' => 'textfield',
    '#description' => t('Please enter the Sequence Ontology term that describes '.
        'the query sequences used for blasting.  This is only necessary if two '.
        'or more sequences have the same name.'),
    '#default_value' => $query_type,
    '#autocomplete_path' => "admin/tripal/storage/chado/auto_name/cvterm/$cv_id",
  );

  $form['query_uniquename'] = array(
    '#title' => t('Use Unique Name'),
    '#type' => 'checkbox',
    '#description' => t('Select this checboxk if the query name in the blast file '.
        'matches the uniquename of the feature.  By default,  the blast results will '.
        'mapped to the "name" of the feature.'),
    '#default_value' => $query_uniquename,
  );


  $form['button'] = array(
    '#type' => 'submit',
    '#value' => t('Import BLAST XML file'),
    '#weight' => 10,
  );

  return $form;
}

/**
 * Implements the tripal_analysis_blast_form_validate.
 */
function tripal_analysis_blast_form_validate($form, &$form_state) {

  $analysis_id = trim($form_state['values']['analysis_id']);
  $db_options = $form_state['values']['db_options'];
  $blastdb = $form_state['values']['blastdb'];
  $blastfile = trim($form_state['values']['blastfile']);
  $blastfile_ext = trim($form_state['values']['blastfile_ext']);
  $is_concat = $form_state['values']['is_concat'];
  $no_parsed = $form_state['values']['no_parsed'];
  $query_re = trim($form_state['values']['query_re']);
  $query_type   = trim($form_state['values']['query_type']);
  $query_uniquename   = $form_state['values']['query_uniquename'];

  // check to see if the file is located local to Drupal
  $blastfile = trim($blastfile);
  if (!file_exists($blastfile)) {
    form_set_error('blastfile', t("Cannot find the file on the system. Check that the file exists or that the web server has permissions to read the file."));
  }
}

/**
 * Implements the tripal_analysis_blast_form_validate.
 */
function tripal_analysis_blast_form_submit($form, &$form_state) {

  global $user;

  $analysis_id = trim($form_state['values']['analysis_id']);
  $db_options = $form_state['values']['db_options'];
  $blastdb = $form_state['values']['blastdb'];
  $blastfile = trim($form_state['values']['blastfile']);
  $blastfile_ext = trim($form_state['values']['blastfile_ext']);
  $is_concat = $form_state['values']['is_concat'];
  $no_parsed = $form_state['values']['no_parsed'];
  $query_re = trim($form_state['values']['query_re']);
  $query_type = trim($form_state['values']['query_type']);
  $query_uniquename = $form_state['values']['query_uniquename'];
  $blastjob = 1;
  $search_keywords = 1;

  // add a job if the user wants to parse the XML
  $job_args = array(
    $analysis_id,
    $blastdb,
    $blastfile,
    $no_parsed,
    $blastfile_ext,
    $query_re,
    $query_type,
    $query_uniquename,
    $is_concat,
    $search_keywords,
  );

  $includes = array(
    module_load_include('inc', 'tripal_analysis_blast', 'includes/tripal_analysis_blast.xml_parser'),
  );
  tripal_add_job("Parse blast: $blastfile", 'tripal_analysis_blast',
      'tripal_analysis_blast_parseXMLFile', $job_args, $user->uid, 10, $includes);

}